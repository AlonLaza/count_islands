[{"D:\\count_islands\\src\\index.js":"1","D:\\count_islands\\src\\Maze.js":"2","D:\\count_islands\\src\\Header.js":"3","D:\\count_islands\\src\\Board.js":"4","D:\\count_islands\\src\\CountIslands.js":"5","D:\\count_islands\\src\\App.js":"6"},{"size":911,"mtime":1606396108456,"results":"7","hashOfConfig":"8"},{"size":1077,"mtime":1606242220552,"results":"9","hashOfConfig":"8"},{"size":977,"mtime":1606390745126,"results":"10","hashOfConfig":"8"},{"size":6287,"mtime":1606405608860,"results":"11","hashOfConfig":"8"},{"size":1600,"mtime":1606385271408,"results":"12","hashOfConfig":"8"},{"size":2358,"mtime":1606406877996,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"15s14k",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"D:\\count_islands\\src\\index.js",["30"],"D:\\count_islands\\src\\Maze.js",["31"],"import Maze from './Maze';\r\n\r\nclass Cell {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.walls = [true, true, true, true]; //0-up, 1-right, 2-down,3 -left\r\n        this.visited = false;\r\n    }\r\n}\r\n\r\nclass MazeGenerator {\r\n    constructor(rows, cols) {\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        this.createGrid();\r\n    }\r\n\r\n    createGrid() {\r\n        const grid = [];\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                grid.push(false);\r\n                //console.log(Math.floor(Math.random()*2));\r\n              //  grid.push(Math.floor(Math.random()*2));\r\n            }\r\n        }\r\n        this.grid = grid;\r\n    }\r\n\r\n    getCell(y, x) {\r\n        if (x < 0 || y < 0 || x >= this.cols || y >= this.rows) {\r\n            return null;\r\n        }\r\n        return this.grid[x + y * this.cols];\r\n    }\r\n    generate() {\r\n        \r\n        this.createGrid();\r\n\r\n        return new Maze(this.rows, this.cols, this.grid);\r\n    };\r\n}\r\n\r\nexport default MazeGenerator;",["32","33"],"D:\\count_islands\\src\\Header.js",[],"D:\\count_islands\\src\\Board.js",["34","35","36","37","38","39","40","41","42"],"D:\\count_islands\\src\\CountIslands.js",["43"],"class CountIslands {\r\n    constructor(grid, rows, cols) {\r\n        this.grid = grid;\r\n        this.rows = rows;\r\n        this.cols = cols; \r\n        this.isVisited = [];   \r\n        this.count=0; \r\n    }\r\n\r\n    canEnterCell = (y, x) => { \r\n\r\n        if (y < 0 || y >= this.rows\r\n        || x < 0 || x >= this.cols\r\n        || this.isVisited[x + y * this.cols] \r\n        || this.grid[x + y * this.cols] == 0) {\r\n        return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    expandSearch = (y, x) => {\r\n        this.isVisited[x + y * this.cols] = this.count;\r\n        for (let i = -1; i <= 1; ++i) {\r\n            for (let j = -1; j <= 1; ++j) {\r\n                let isSafeCell = this.canEnterCell(y+i, x+j);                                   \r\n                if (isSafeCell) {\r\n                    this.expandSearch(y+i, x+j);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    findIslands = ()=>{\r\n\r\n        /*Initially all cells are not yet visited*/\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                this.isVisited[x + y * this.cols] = false;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n\r\n                if (this.grid[x + y *this.cols] && !this.isVisited[x + y * this.cols]) {\r\n                    this.count++;\r\n                    this.expandSearch(y, x);\r\n                    //++count;\r\n                }\r\n            }\r\n        }\r\n        return [this.count,this.isVisited];\r\n    };\r\n\r\n}\r\n\r\nexport default CountIslands;\r\n","D:\\count_islands\\src\\App.js",["44","45"],"import React, {useState,useCallback } from 'react';\r\nimport styles from './App.module.css';\r\nimport {useHistory } from \"react-router-dom\";\r\nimport Background from './images/islandImage.jpg';\r\n\r\n\r\nfunction App() {\r\n\r\n    const history = useHistory();\r\n\r\n    const checkInput = ()=>{\r\n        const rows = parseInt(document.getElementById(\"input_rows\").value);\r\n        const cols = parseInt(document.getElementById(\"input_cols\").value);\r\n        if(isNaN(rows) || isNaN(cols) || cols<1 || rows<1){\r\n            return false;\r\n        }\r\n        else{\r\n            return {rows:rows,cols:cols};\r\n        }\r\n    }\r\n\r\n    const showBoard = ({randomize})=>{\r\n        let ans = checkInput();\r\n        if(!ans){\r\n            alert('Invalid Input, Please Enter Integers')\r\n            return;\r\n        }\r\n         history.push({pathname: \"/board\",\r\n                       state: { randomize: randomize, rows:ans.rows, cols:ans.cols}});\r\n    }\r\n    \r\n    return (\r\n        <div className={styles.root}>\r\n           <section style={{flex:1,backgroundImage: `url(${Background})`} }>            \r\n            </section>    \r\n            <div className={styles.mydiv}>\r\n                <h4 style={{marginTop:20,textAlign:'center',color: 'black'}}>Please Enter Bitmap Size</h4>\r\n                <form style={{marginTop:'5%',marginLeft:'25%'}}>\r\n                    <div class=\"form-row align-items-center\">\r\n                        <div class=\"col-sm-4\">\r\n                        <input style={{color:'black'}} type=\"number\" class=\"form-control\" id=\"input_rows\" placeholder=\"Rows\"/>\r\n                        </div>\r\n                        <div class=\"col-sm-4\">\r\n                        <input type=\"number\" class=\"form-control\" id=\"input_cols\" placeholder=\"Cols\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{marginTop:'5%', flex:'10%',justifyContent: 'space-between'}}>\r\n                            <button type=\"button\" class=\"btn btn-primary\" onClick={()=>{showBoard({randomize:true});}} >Randomize</button>\r\n                            <button type=\"button\" style={{marginLeft:'5%'}} class=\"btn btn-primary\" onClick={()=>{showBoard({randomize:false});}} >Bonus Draw</button>\r\n                    </div>               \r\n                </form>  \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"46","severity":1,"message":"47","line":14,"column":5,"nodeType":"48","messageId":"49","endLine":14,"endColumn":9},{"ruleId":"46","severity":1,"message":"50","line":3,"column":7,"nodeType":"48","messageId":"49","endLine":3,"endColumn":11},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"46","severity":1,"message":"55","line":23,"column":48,"nodeType":"48","messageId":"49","endLine":23,"endColumn":52},{"ruleId":"56","severity":1,"message":"57","line":40,"column":8,"nodeType":"58","endLine":40,"endColumn":10,"suggestions":"59"},{"ruleId":"46","severity":1,"message":"60","line":73,"column":16,"nodeType":"48","messageId":"49","endLine":73,"endColumn":26},{"ruleId":"46","severity":1,"message":"61","line":73,"column":28,"nodeType":"48","messageId":"49","endLine":73,"endColumn":39},{"ruleId":"46","severity":1,"message":"62","line":73,"column":41,"nodeType":"48","messageId":"49","endLine":73,"endColumn":48},{"ruleId":"63","severity":1,"message":"64","line":110,"column":29,"nodeType":"65","messageId":"66","endLine":110,"endColumn":31},{"ruleId":"63","severity":1,"message":"64","line":110,"column":37,"nodeType":"65","messageId":"66","endLine":110,"endColumn":39},{"ruleId":"63","severity":1,"message":"64","line":114,"column":37,"nodeType":"65","messageId":"66","endLine":114,"endColumn":39},{"ruleId":"56","severity":1,"message":"67","line":129,"column":8,"nodeType":"58","endLine":129,"endColumn":29,"suggestions":"68"},{"ruleId":"63","severity":1,"message":"64","line":15,"column":41,"nodeType":"65","messageId":"66","endLine":15,"endColumn":43},{"ruleId":"46","severity":1,"message":"69","line":1,"column":16,"nodeType":"48","messageId":"49","endLine":1,"endColumn":24},{"ruleId":"46","severity":1,"message":"70","line":1,"column":25,"nodeType":"48","messageId":"49","endLine":1,"endColumn":36},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Cell' is defined but never used.","no-native-reassign",["71"],"no-negated-in-lhs",["72"],"'left' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'maze.cols', 'maze.grid', 'maze.rows', and 'randomize'. Either include them or remove the dependency array.","ArrayExpression",["73"],"'blockWidth' is assigned a value but never used.","'blockHeight' is assigned a value but never used.","'xOffset' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.",["74"],"'useState' is defined but never used.","'useCallback' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [maze.cols, maze.grid, maze.rows, randomize]",{"range":"79","text":"80"},"Update the dependencies array to be: [count, ctx, maze, randomize]",{"range":"81","text":"82"},[1403,1405],"[maze.cols, maze.grid, maze.rows, randomize]",[5048,5069],"[count, ctx, maze, randomize]"]