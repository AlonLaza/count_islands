[{"D:\\count_islands\\src\\index.js":"1","D:\\count_islands\\src\\Board.js":"2","D:\\count_islands\\src\\CountIslands.js":"3","D:\\count_islands\\src\\App.js":"4","D:\\count_islands\\src\\serviceWorker.js":"5"},{"size":911,"mtime":1606396108456,"results":"6","hashOfConfig":"7"},{"size":5852,"mtime":1606492132021,"results":"8","hashOfConfig":"7"},{"size":2258,"mtime":1606838182982,"results":"9","hashOfConfig":"7"},{"size":1992,"mtime":1606491285613,"results":"10","hashOfConfig":"7"},{"size":5083,"mtime":1606132228233,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"15s14k",{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"D:\\count_islands\\src\\index.js",["26"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport Board from './Board';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <Router> \r\n        {/* <App /> */}\r\n        <Switch>\r\n          <Route path=\"/board\">\r\n            <Board />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <App />\r\n          </Route>\r\n         \r\n   \r\n        </Switch>\r\n    </Router>\r\n   \r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n",["27","28"],"D:\\count_islands\\src\\Board.js",["29","30","31"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport styles from './Board.module.css';\r\nimport Grid from './Grid';\r\nimport CountIslands from './CountIslands';\r\nimport {useLocation, useHistory} from \"react-router-dom\";\r\nimport distinctColors from 'distinct-colors'\r\n\r\n\r\nfunction Board() {\r\n    const {rows, cols} = useLocation().state;\r\n    const canvas = useRef(null);\r\n    const container = useRef(null);\r\n    const [ctx, setCtx] = useState(undefined);\r\n    const [grid, setGrid] = useState(new Grid(rows, cols));\r\n    const [count, setCount] = useState(0);\r\n    const [solveButPress, setSolveButPress] = useState(false);\r\n    const [randomize,setRandomize] = useState(useLocation().state.randomize);\r\n    const history = useHistory();\r\n    const block = useRef({});\r\n\r\n    useEffect(() => {\r\n        const fitToContainer = () => {\r\n            const { offsetWidth, offsetHeight } = container.current;\r\n            canvas.current.width = offsetWidth;\r\n            canvas.current.height = offsetHeight;\r\n            canvas.current.style.width = offsetWidth + 'px';\r\n            canvas.current.style.height = offsetHeight + 'px';\r\n        };\r\n\r\n        setCtx(canvas.current.getContext('2d'));\r\n        fitToContainer();\r\n        block.current.blockWidth = Math.floor(canvas.current.width / grid.cols);\r\n        block.current.blockHeight = Math.floor(canvas.current.height / grid.rows);\r\n        block.current.xOffset = Math.floor((canvas.current.width - grid.cols * block.current.blockWidth) / 2);\r\n        \r\n        if(randomize){\r\n            for (let y = 0; y < grid.rows; y++) {\r\n                for (let x = 0; x < grid.cols; x++) {\r\n                    grid.cells[x + y * grid.cols]= (Math.floor(Math.random()*2)? true : false);\r\n                }\r\n            }\r\n        }\r\n    }, []);\r\n\r\n\r\nconst handleEvent = (event) => {    \r\n    if (!randomize && event.type === \"mousedown\") {\r\n        const  rect =  canvas.current.getBoundingClientRect(); //canvas rectengle\r\n        const gridLeft = rect.left + block.current.xOffset; //canvas horizontal start\r\n        const gridTop = rect.top; //canvas vertical start\r\n        const col = Math.floor((event.pageX - gridLeft) / block.current.blockWidth);\r\n        const row= Math.floor((event.pageY - gridTop) / block.current.blockHeight);\r\n        if(col < 0 || col >= grid.cols || row<0 || row>=grid.rows){\r\n            return;\r\n        }\r\n        setGrid(grid => {\r\n            return { ...grid, cells: grid.cells.map((x,i)=>{\r\n                if(i===col+row*grid.cols){\r\n                   return !x; \r\n                }\r\n                else{\r\n                    return x;\r\n                }\r\n            }) }\r\n          });  \r\n       } \r\n   }\r\n\r\n    useEffect(() => {\r\n\r\n        const {blockWidth, blockHeight, xOffset} = block.current;\r\n\r\n        const drawLine = (x1, y1, width, height) => {\r\n            ctx.strokeStyle = 'white';\r\n            ctx.beginPath();\r\n            ctx.moveTo(x1, y1);\r\n            ctx.lineTo(x1 + width, y1 + height);\r\n            ctx.stroke();\r\n        };\r\n\r\n        const draw = () => {\r\n            if (!ctx) {\r\n                return;\r\n            }\r\n            ctx.fillStyle = '#0879a6'; //sea color\r\n            ctx.fillRect(0, 0, canvas.current.width, canvas.current.height);\r\n            let palette = distinctColors({count: count}); //creating number of colors as number of found islands\r\n\r\n            for (let y = 0; y < grid.rows; y++) {\r\n                for (let x = 0; x < grid.cols; x++) {\r\n                    const cell = grid.cells[x + y * grid.cols];\r\n                        drawLine(blockWidth * x + xOffset, blockHeight * y, blockWidth, 0)\r\n                        drawLine(blockWidth * (x + 1) + xOffset, blockHeight * y, 0, blockHeight);\r\n                        drawLine(blockWidth * x + xOffset, blockHeight * (y + 1), blockWidth, 0);\r\n                        drawLine(blockWidth * x + xOffset, blockHeight * y, 0, blockHeight);\r\n                        if(cell){\r\n                            if(count==0){\r\n                                ctx.fillStyle='#ECB78B'; //land color\r\n                            }\r\n                            else{\r\n                                ctx.fillStyle = palette[cell-1]; //island color\r\n                            }\r\n                            ctx.fillRect(blockWidth * x + xOffset, blockHeight * y, blockWidth, blockHeight);   \r\n                        }\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        draw();\r\n    }, [ctx, grid]);\r\n\r\n    const solve = () => {\r\n        let numOfIslandsRes = new CountIslands(grid.cells,grid.rows,grid.cols).findIslands();\r\n        setCount(numOfIslandsRes.count);\r\n        setGrid(grid => {\r\n            return { ...grid,cells: numOfIslandsRes.cells }\r\n          }); \r\n          setSolveButPress(true);\r\n          setRandomize(true); //disabling cells drawing\r\n          \r\n    }\r\n\r\n    const restart = () => {\r\n        history.push(\"/\"); \r\n    }\r\n\r\n    return (\r\n        <div className={styles.root} ref={container}>\r\n            <header>\r\n                <div className={styles.row}>\r\n                    {!solveButPress && (\r\n                        <div class=\"container\">\r\n                            <button type=\"button\" class=\"btn btn-primary btn-m mt-1 mb-1\" onClick={solve}>Solve</button>\r\n                        </div>\r\n                    )}\r\n                    {solveButPress && (\r\n                    <div class=\"row\">\r\n                        <h4 class=\"mt-2\">Found {count} Islands</h4>\r\n                        <button type=\"button\" class=\"btn btn-primary btn-m mt-1 mb-1 ml-5\" onClick={restart}>Restart</button>\r\n                    </div>)}\r\n                </div>     \r\n            </header>\r\n            <canvas ref={canvas} onMouseDown={ handleEvent } /> \r\n        </div>   \r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Board;\r\n","D:\\count_islands\\src\\CountIslands.js",[],"D:\\count_islands\\src\\App.js",[],"D:\\count_islands\\src\\serviceWorker.js",[],["32","33"],{"ruleId":"34","severity":1,"message":"35","line":14,"column":5,"nodeType":"36","messageId":"37","endLine":14,"endColumn":9},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":43,"column":8,"nodeType":"44","endLine":43,"endColumn":10,"suggestions":"45"},{"ruleId":"46","severity":1,"message":"47","line":97,"column":37,"nodeType":"48","messageId":"49","endLine":97,"endColumn":39},{"ruleId":"42","severity":1,"message":"50","line":111,"column":8,"nodeType":"44","endLine":111,"endColumn":19,"suggestions":"51"},{"ruleId":"38","replacedBy":"52"},{"ruleId":"40","replacedBy":"53"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["54"],"no-negated-in-lhs",["55"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'grid.cells', 'grid.cols', 'grid.rows', and 'randomize'. Either include them or remove the dependency array.","ArrayExpression",["56"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.",["57"],["54"],["55"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [grid.cells, grid.cols, grid.rows, randomize]",{"range":"62","text":"63"},"Update the dependencies array to be: [count, ctx, grid]",{"range":"64","text":"65"},[1803,1805],"[grid.cells, grid.cols, grid.rows, randomize]",[4498,4509],"[count, ctx, grid]"]