[{"D:\\count_islands\\src\\index.js":"1","D:\\count_islands\\src\\Maze.js":"2","D:\\count_islands\\src\\Header.js":"3","D:\\count_islands\\src\\Board.js":"4","D:\\count_islands\\src\\CountIslands.js":"5","D:\\count_islands\\src\\App.js":"6","D:\\count_islands\\src\\serviceWorker.js":"7"},{"size":911,"mtime":1606396108456,"results":"8","hashOfConfig":"9"},{"size":1077,"mtime":1606242220552,"results":"10","hashOfConfig":"9"},{"size":977,"mtime":1606390745126,"results":"11","hashOfConfig":"9"},{"size":6277,"mtime":1606415090917,"results":"12","hashOfConfig":"9"},{"size":1600,"mtime":1606385271408,"results":"13","hashOfConfig":"9"},{"size":2428,"mtime":1606415552869,"results":"14","hashOfConfig":"9"},{"size":5083,"mtime":1606132228233,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"15s14k",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"D:\\count_islands\\src\\index.js",["36"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport Board from './Board';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <Router> \r\n        {/* <App /> */}\r\n        <Switch>\r\n          <Route path=\"/board\">\r\n            <Board />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <App />\r\n          </Route>\r\n         \r\n   \r\n        </Switch>\r\n    </Router>\r\n   \r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n",["37","38"],"D:\\count_islands\\src\\Maze.js",["39"],"import Maze from './Maze';\r\n\r\nclass Cell {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.walls = [true, true, true, true]; //0-up, 1-right, 2-down,3 -left\r\n        this.visited = false;\r\n    }\r\n}\r\n\r\nclass MazeGenerator {\r\n    constructor(rows, cols) {\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        this.createGrid();\r\n    }\r\n\r\n    createGrid() {\r\n        const grid = [];\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                grid.push(false);\r\n                //console.log(Math.floor(Math.random()*2));\r\n              //  grid.push(Math.floor(Math.random()*2));\r\n            }\r\n        }\r\n        this.grid = grid;\r\n    }\r\n\r\n    getCell(y, x) {\r\n        if (x < 0 || y < 0 || x >= this.cols || y >= this.rows) {\r\n            return null;\r\n        }\r\n        return this.grid[x + y * this.cols];\r\n    }\r\n    generate() {\r\n        \r\n        this.createGrid();\r\n\r\n        return new Maze(this.rows, this.cols, this.grid);\r\n    };\r\n}\r\n\r\nexport default MazeGenerator;","D:\\count_islands\\src\\Header.js",[],["40","41"],"D:\\count_islands\\src\\Board.js",["42","43","44","45"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport styles from './Board.module.css';\r\nimport Maze from './Maze';\r\nimport CountIslands from './CountIslands';\r\nimport {useLocation, useHistory} from \"react-router-dom\";\r\nimport distinctColors from 'distinct-colors'\r\n\r\n\r\nfunction Board() {\r\n    const {rows, cols} = useLocation().state;\r\n    const canvas = useRef(null);\r\n    const container = useRef(null);\r\n    const [ctx, setCtx] = useState(undefined);\r\n    const [maze, setMaze] = useState(new Maze(rows, cols));\r\n    const [count, setCount] = useState(0);\r\n    const [solveButPress, setSolveButPress] = useState(false);\r\n    const [randomize,setRandomize] = useState(useLocation().state.randomize);\r\n    const history = useHistory();\r\n    const block = useRef({});\r\n\r\n    useEffect(() => {\r\n\r\n        const fitToContainer = () => {\r\n            const { offsetWidth, offsetHeight, left } = container.current;\r\n            canvas.current.width = offsetWidth;\r\n            canvas.current.height = offsetHeight;\r\n            canvas.current.style.width = offsetWidth + 'px';\r\n            canvas.current.style.height = offsetHeight + 'px';\r\n        };\r\n\r\n        setCtx(canvas.current.getContext('2d'));\r\n        fitToContainer();\r\n\r\n        if(randomize){\r\n            for (let y = 0; y < maze.rows; y++) {\r\n                for (let x = 0; x < maze.cols; x++) {\r\n                    maze.grid[x + y * maze.cols]= (Math.floor(Math.random()*2));\r\n                }\r\n            }\r\n        }\r\n    }, []);\r\n\r\n\r\nconst handleEvent = (event) => {\r\n    \r\n    if (!randomize && event.type === \"mousedown\") {\r\n        const  rect =  canvas.current.getBoundingClientRect();\r\n        const gridLeft = rect.left + block.current.xOffset;\r\n        const gridTop = rect.top;\r\n        const col = Math.floor((event.pageX - gridLeft) / block.current.blockWidth    );\r\n        const row= Math.floor((event.pageY - gridTop) / block.current.blockHeight    );\r\n        if(col < 0 || col >maze.cols){\r\n            return;\r\n        }\r\n        setMaze(maze => {\r\n            return { ...maze, grid:maze.grid.map((x,i)=>{\r\n                if(i===col+row*maze.cols){\r\n                   return !x; \r\n                }\r\n                else{\r\n                    return x;\r\n                }\r\n            }) }\r\n          });  \r\n       } \r\n   }\r\n\r\n    useEffect(() => {\r\n        \r\n\r\n        block.current.blockWidth = Math.floor(canvas.current.width / maze.cols);\r\n        block.current.blockHeight = Math.floor(canvas.current.height / maze.rows);\r\n        block.current.xOffset = Math.floor((canvas.current.width - maze.cols * block.current.blockWidth) / 2);\r\n        const {blockWidth, blockHeight, xOffset} = block.current;\r\n\r\n        const drawLine = (x1, y1, width, height) => {\r\n            ctx.strokeStyle = 'white';\r\n            ctx.beginPath();\r\n            ctx.moveTo(x1, y1);\r\n            ctx.lineTo(x1 + width, y1 + height);\r\n            ctx.stroke();\r\n        };\r\n\r\n        const draw = () => {\r\n            if (!ctx) {\r\n                return;\r\n            }\r\n            ctx.fillStyle = 'blue';\r\n            ctx.fillRect(0, 0, canvas.current.width, canvas.current.height);\r\n             let colors = [];\r\n            // while (colors.length < count) {\r\n            //     do {\r\n            //         var color = Math.floor((Math.random()*1000000)+1);\r\n            //     } while (colors.indexOf(color) >= 0);\r\n            //     colors.push(\"#\" + (\"000000\" + color.toString(16)).slice(-6));\r\n            // }\r\n            console.log('count',count);\r\n            let palette = distinctColors({count: count});\r\n            console.log(palette);\r\n            console.log(palette[0]);\r\n\r\n            for(let i=0;i<count;i++){\r\n                colors.push(\"#\" + ((1 << 24) * Math.random() | 0).toString(16));\r\n            }\r\n            for (let y = 0; y < maze.rows; y++) {\r\n                for (let x = 0; x < maze.cols; x++) {\r\n                    const cell = maze.grid[x + y * maze.cols];\r\n                        drawLine(blockWidth * x + xOffset, blockHeight * y, blockWidth, 0)\r\n                        drawLine(blockWidth * (x + 1) + xOffset, blockHeight * y, 0, blockHeight);\r\n                        drawLine(blockWidth * x + xOffset, blockHeight * (y + 1), blockWidth, 0);\r\n                        drawLine(blockWidth * x + xOffset, blockHeight * y, 0, blockHeight);\r\n                        if(cell){\r\n                            if(count==0){\r\n                                ctx.fillStyle='brown';  \r\n                            }\r\n                            else{\r\n                                //ctx.fillStyle = colors[cell-1];\r\n                                ctx.fillStyle = palette[cell-1];\r\n\r\n                            }\r\n                            ctx.fillRect(blockWidth * x + xOffset, blockHeight * y, blockWidth, blockHeight);   \r\n                        }\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        draw();\r\n    }, [ctx, maze,randomize]);\r\n\r\n    const solve = () => {\r\n        let numOfIslands = new CountIslands(maze.grid,maze.rows,maze.cols).findIslands();\r\n        setCount(numOfIslands[0]);\r\n        setMaze(maze => {\r\n            return { ...maze,grid: numOfIslands[1] }\r\n          }); \r\n          setSolveButPress(true);\r\n          setRandomize(true);   \r\n          \r\n    }\r\n\r\n    const restart = () => {\r\n        history.push(\"/\"); \r\n    }\r\n\r\n    return (\r\n        <div className={styles.root} ref={container}>\r\n            <header>\r\n                <div className={styles.row}>\r\n                    {!solveButPress && (\r\n                        <div class=\"container\">\r\n                            <button type=\"button\" class=\"btn btn-primary btn-lg mt-2\" onClick={solve}>Solve</button>\r\n                        </div>\r\n                    )}\r\n                    {solveButPress && (\r\n                    <div class=\"container row\">\r\n                        <h1>Found {count} Islands</h1>\r\n                        <button type=\"button\" class=\"btn btn-primary btn-lg h-75 mt-2 ml-5\" onClick={restart}>Restart</button>\r\n                    </div>)}\r\n                </div>     \r\n            </header>\r\n            <canvas ref={canvas} onMouseDown={ handleEvent } /> \r\n        </div>   \r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Board;\r\n","D:\\count_islands\\src\\CountIslands.js",["46"],"class CountIslands {\r\n    constructor(grid, rows, cols) {\r\n        this.grid = grid;\r\n        this.rows = rows;\r\n        this.cols = cols; \r\n        this.isVisited = [];   \r\n        this.count=0; \r\n    }\r\n\r\n    canEnterCell = (y, x) => { \r\n\r\n        if (y < 0 || y >= this.rows\r\n        || x < 0 || x >= this.cols\r\n        || this.isVisited[x + y * this.cols] \r\n        || this.grid[x + y * this.cols] == 0) {\r\n        return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    expandSearch = (y, x) => {\r\n        this.isVisited[x + y * this.cols] = this.count;\r\n        for (let i = -1; i <= 1; ++i) {\r\n            for (let j = -1; j <= 1; ++j) {\r\n                let isSafeCell = this.canEnterCell(y+i, x+j);                                   \r\n                if (isSafeCell) {\r\n                    this.expandSearch(y+i, x+j);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    findIslands = ()=>{\r\n\r\n        /*Initially all cells are not yet visited*/\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                this.isVisited[x + y * this.cols] = false;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n\r\n                if (this.grid[x + y *this.cols] && !this.isVisited[x + y * this.cols]) {\r\n                    this.count++;\r\n                    this.expandSearch(y, x);\r\n                    //++count;\r\n                }\r\n            }\r\n        }\r\n        return [this.count,this.isVisited];\r\n    };\r\n\r\n}\r\n\r\nexport default CountIslands;\r\n","D:\\count_islands\\src\\App.js",["47","48"],"D:\\count_islands\\src\\serviceWorker.js",[],{"ruleId":"49","severity":1,"message":"50","line":14,"column":5,"nodeType":"51","messageId":"52","endLine":14,"endColumn":9},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"49","severity":1,"message":"57","line":3,"column":7,"nodeType":"51","messageId":"52","endLine":3,"endColumn":11},{"ruleId":"53","replacedBy":"58"},{"ruleId":"55","replacedBy":"59"},{"ruleId":"49","severity":1,"message":"60","line":24,"column":48,"nodeType":"51","messageId":"52","endLine":24,"endColumn":52},{"ruleId":"61","severity":1,"message":"62","line":41,"column":8,"nodeType":"63","endLine":41,"endColumn":10,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":113,"column":37,"nodeType":"67","messageId":"68","endLine":113,"endColumn":39},{"ruleId":"61","severity":1,"message":"69","line":129,"column":8,"nodeType":"63","endLine":129,"endColumn":29,"suggestions":"70"},{"ruleId":"65","severity":1,"message":"66","line":15,"column":41,"nodeType":"67","messageId":"68","endLine":15,"endColumn":43},{"ruleId":"49","severity":1,"message":"71","line":1,"column":16,"nodeType":"51","messageId":"52","endLine":1,"endColumn":24},{"ruleId":"49","severity":1,"message":"72","line":1,"column":25,"nodeType":"51","messageId":"52","endLine":1,"endColumn":36},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["73"],"no-negated-in-lhs",["74"],"'Cell' is defined but never used.",["73"],["74"],"'left' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'maze.cols', 'maze.grid', 'maze.rows', and 'randomize'. Either include them or remove the dependency array.","ArrayExpression",["75"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.",["76"],"'useState' is defined but never used.","'useCallback' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [maze.cols, maze.grid, maze.rows, randomize]",{"range":"81","text":"82"},"Update the dependencies array to be: [count, ctx, maze, randomize]",{"range":"83","text":"84"},[1510,1512],"[maze.cols, maze.grid, maze.rows, randomize]",[4959,4980],"[count, ctx, maze, randomize]"]